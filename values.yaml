global:
  #Inject config maps
  inject_maps: []

  routing:
    type:

  operator:
    keycloak:
      realm:
  db:
    port:
    host:

  # node selector for the pods
  nodeSelector:
  
  # tolerations for the pods
  tolerations:

  # configuration for the oidc extension
  oidc:
    # configuration for the oidc-client
    client:
      # define auth-url for the oidc-client
      url:


# Name of the instance, default {{ .Release.Name }}-{{ .Values.name | default .Chart.Name }}
name:

# config/application.properties
config:

  # enabled or disable application.properties config map
  enabled: false

  # name of the config volume mounts
  name: application-properties

  # file system mounting path
  mountPath: /deployments/config/application.properties

  # config map key
  subPath: application.properties

  # config map suffix <app_name>-<suffix>
  suffix: "application-properties"

  # values: |
  #   quarkus.property1=value
  #   quarkus.property2=value  
  values:

data:

  # create config map for data import
  import:
    # enabled or disable application.properties config map
    enabled: false

    # name of the config volume mounts
    name: data-import

    # file system mounting path
    mountPath: /deployments/data/data-import.json

    # config map key
    subPath: data-import.json

    # config map suffix <app_name>-<suffix>
    suffix: "data-import"

    # values to import
    values:
    # values: |    
    #   quarkus.property1=value
    #   quarkus.property2=value  

# Application image
image:
  # Docker registry
  registry: "ghcr.io"
  # Docker repository (application name)
  repository: "change-me"
  # Docker image tag (application version)
  tag: "main"
  # pull policy Always | IfNotPresent | Never
  pull: IfNotPresent
  # tag suffix for example native
  suffix:
  # tag suffix seprator
  separator: "-"

# Image pull secrets
imagePullSecrets:

# health
livenessProbe:
  url: /q/health/live

readinessProbe:
  url: /q/health/ready

startupProbe:
  url: /q/health/started

# Template env variable for Quarkus application
template:
  db_property_url: "_PROD_QUARKUS_DATASOURCE_JDBC_URL"
  db_property_username: "_PROD_QUARKUS_DATASOURCE_USERNAME"
  db_property_password: "_PROD_QUARKUS_DATASOURCE_PASSWORD"
  oidc_client_credential: "_PROD_QUARKUS_OIDC_CLIENT_CREDENTIALS_SECRET"
  oidc_client_id: "_PROD_QUARKUS_OIDC_CLIENT_CLIENT_ID"
  oidc_client_url: "_PROD_QUARKUS_OIDC_CLIENT_AUTH_SERVER_URL"
  oidc_server_url: "QUARKUS_OIDC_AUTH_SERVER_URL"
  permision_product_name: "ONECX_PERMISSIONS_PRODUCT_NAME"
# node selector for the pods
nodeSelector:

# tolerations for the pods
tolerations:

# pod
pod:
  port: 8080

# service
service:
  port: 8080

# Routing
routing:
  # Enable or disable routing
  enabled: false
  # Default URL
  default_url: "change.com"

  # traefik | ingress
  type: none

  # path
  path:

  # routing for bff
  bff: false

  # host configuration
  host:
    # prio1 if the name is define generate domain <override>.<default_url>
    override:
    # prio2 if the name is define generate domain <name>-<release_namespace>.<default_url>
    name:
    # else <release_name>-<name of chart_name>-<release_namespace>.<default_url>

  traefik:
    # middleware
    middleware:
      # middleware for treafik
      enabled: false
      # traefik middleware name
      name: 

  # ingress
  ingress:
    annotations:
      ingress.kubernetes.io/ssl-redirect: "false"

  # custom service name and port for the routing
  service:
    name:
    port:

# Replicas
replicas: 1


serviceAccount:
  enabled: false
  name: 

# Deprecated: Service account suffix
serviceAccountSuffix:

# Inject config maps
inject_maps: []

# Database configuration
db:
  # Enable or disable database connection
  enabled: false

  # Database name
  database:

  # Database username
  username:

  # Database password
  password:

  # Database port
  port: 5432

  # enable or disable database operator to create a schema for the application
  operator: true

  # JDBC url. Generated
  # url: "jdbc:postgresql://localhost:5432/changeit"

  # Database host, Generated
  # host: app-postgresql

  check:
    # Enable or disable check database connection with init container
    enabled: true
    # name of the init container
    name: check-db  
    # container image configuration
    image:
      # Docker registry
      registry: "ghcr.io"
      # Docker repository (application name)
      repository: "onecx/onecx-db-check"
      # Docker image tag (application version)
      tag: "0.1.0"
      # pull policy Always | IfNotPresent | Never
      pull: IfNotPresent
      # tag suffix for example native
      suffix: "native"
      # tag suffix seprator
      separator: "-"

# configuration for the oidc extension
oidc:
  # configuration for the oidc-client
  client:
    # define auth-url for the oidc-client
    url:

# Kubernetes operator configuration
operator:

  # secret-generator oprator
  secretgenerator:
    # enabled or disable secret-generator annotation 
    enabled: true

  # reloader operator for configmap and secrets
  reloader:
    # enabled or disable reloader annotation 
    enabled: true
    # enabled or disable auto reloader (all deployment references)
    auto: true

  # product store microservice
  microservice:
    # enable or disable configuration for operator
    enabled: true
    # CRD
    spec:
      # default deployment name (release_name-name)
      appId:
      # default release name (product name)
      productName:
      # application description (release_name-name)
      description:
      # default deployment name (release_name-name)
      name:
      # .Values.name or this type
      type:

  # permissions
  permission:
    # enable or disable configuration for operator
    enabled: false

    spec:      
      # default release name (product name)
      productName:
      # default deployment name (release_name-name)
      appId:
      # application name (release_name-name)
      name:
      # application description (release_name-name)
      description:
      # map of permissions
      # resource:
      #    action: description
      permissions:

  # Data mgmt operator
  data:
    mgmt:
      # enabled or disable config for operator
      enabled: true
      # database type POSTGRES
      dbType: POSTGRES
      # file prefix for the scenario
      prefix:
      # schema
      schema: public

  # microfrontend
  microfrontend:
    # enable or disable configuration for operator
    enabled: false

    # default remote entry path suffix
    entrySuffix: remoteEntry.js

    # map of <name, spec> of mfe spec ( see spec )
    specs:

    # definnition and default values for the list of spec 'specs'
    spec:
      
      # deprecated true | false
      deprecated: false

      # type oe mfe [ MODULE, COMPONENT ]
      type: MODULE
      
      # description text
      description: change-me
      
      # exposed module name
      exposedModule: change-me
      
      # icon name
      iconName:
      
      # note
      note:
      
      # remote name
      remoteName:

      # tag name
      tagName:

      # list of strings
      classifications: []      

      # list of name and path
      endpoints:
      # - name:
      #   path:

      # technology is free text
      technology: ANGULAR

      # contact email
      contact: onecx@1000kit.org

      # default is app.routing.path
      remoteBaseUrl:
      
      # default is app.routing.path + entrySuffix
      remoteEntry:

      # default release name (product name)
      productName:
      
      # default deployment name (release_name-name or appId)
      appId:

      # default deployment name (release_name-name)
      appName:

  # Keycloak operator
  keycloak:
    # Keycloak client operator
    client:
      # enabled or disable config for operator
      enabled: false
      # Set password for secret of default name of app
      password:
      # secret configuration
      secret:
        # secret generator configuration
        generator:
          # enabled or disable secret generator annotation for kc client resource
          enabled: true
          # secret generator encoding base64 | base64url | base32 | hex
          encoding: base64url

      # definition
      spec:
        # keycloak realm where the client has to be created
        realm:
        # type of client. Current possibilities [ ui | machine ]
        type: machine
        # Name of Secret where the password is stored (alternative is to set kcConfig.password)
        passwordSecrets:
        # Key used in secret where password is stored
        passwordKey:
        # Configuration for the keycloak client
        kcConfig:
          # default deployment name (release_name-name)
          clientId:
          # description for the client
          description:
          # flag to enable/disable client in keycloak
          enabled:
          # client authenticator type (client-secret)
          clientAuthenticatorType:
          # Redirect uris (used for the ui client). List of Strings
          redirectUris: []
          # Web origins (user for the ui client). List of Strings
          webOrigins: []
          # Bearer only flag
          bearerOnly:
          # Standard flow enabled flag
          standardFlowEnabled:
          # Implicit flow enabled flag
          implicitFlowEnabled:
          # Direct access grants enable flag
          directAccessGrantsEnabled:
          # Service accounts enabled flag
          serviceAccountsEnabled:
          # Public client flag
          publicClient:
          # Protocol (openid-connect)
          protocol:
          # List of string scopes to be added as default
          defaultClientScopes: []
          # List of string scopes to be added as optional
          optionalClientScopes: []
          # Map of custom attributes
          attributes:
            #key1: value1
            #key2: value2
      
